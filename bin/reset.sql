-- PETIT RESET

-- Suppression des tables existantes
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Recette_Ingredient CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Recette CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Ingredient CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Auteur CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Trace CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP SEQUENCE seq_tracking_number';
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;
/


-- CRÉATION DES TABLES


-- Table Auteur
CREATE TABLE Auteur (
  id_auteur NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR2(100) NOT NULL,
  email VARCHAR2(150) UNIQUE NOT NULL,
  bio VARCHAR2(1000)
);

-- Table Recette
CREATE TABLE Recette (
  id_recette NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre VARCHAR2(200) NOT NULL,
  description CLOB,
  instructions CLOB,
  temps_preparation NUMBER(3),
  temps_cuisson NUMBER(3),
  auteur_id NUMBER NOT NULL,
  CONSTRAINT fk_recette_auteur
    FOREIGN KEY (auteur_id)
    REFERENCES Auteur(id_auteur)
    ON DELETE CASCADE
);

-- Table Ingredient
CREATE TABLE Ingredient (
  id_ingredient NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR2(100) NOT NULL,
  cote_sante NUMBER(1) NOT NULL CHECK (cote_sante BETWEEN 1 AND 5)
);

-- Table de liaison Recette_Ingredient
CREATE TABLE Recette_Ingredient (
  id_recette NUMBER NOT NULL,
  id_ingredient NUMBER NOT NULL,
  quantite VARCHAR2(100) NOT NULL,
  PRIMARY KEY (id_recette, id_ingredient),
  CONSTRAINT fk_ri_recette
    FOREIGN KEY (id_recette)
    REFERENCES Recette(id_recette)
    ON DELETE CASCADE,
  CONSTRAINT fk_ri_ingredient
    FOREIGN KEY (id_ingredient)
    REFERENCES Ingredient(id_ingredient)
    ON DELETE CASCADE
);

-- Table Trace
CREATE TABLE Trace (
  id_trace NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name VARCHAR2(50) NOT NULL,
  operation_type VARCHAR2(10) NOT NULL,
  operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  record_id NUMBER,
  record_id2 NUMBER,
  tracking_number NUMBER
);
-- Création d'une séquence pour numéros de suivi des transactions
CREATE SEQUENCE seq_tracking_number
  START WITH 1
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

 
-- IMPLÉMENTATION DU JOURNAL DE TRACE


-- Création de la procédure de journalisation
CREATE OR REPLACE PROCEDURE log_transaction(
  p_table_name IN VARCHAR2,
  p_operation_type IN VARCHAR2,
  p_record_id IN NUMBER,
  p_record_id2 IN NUMBER DEFAULT NULL
)
AS
  v_tracking_number NUMBER;
BEGIN
  SELECT seq_tracking_number.NEXTVAL INTO v_tracking_number FROM DUAL;
  
  INSERT INTO Trace (table_name, operation_type, record_id, record_id2, tracking_number)
  VALUES (p_table_name, p_operation_type, p_record_id, p_record_id2, v_tracking_number);
END;
/

-- Trigger de la table Auteur
CREATE OR REPLACE TRIGGER trg_auteur_trace
AFTER INSERT OR UPDATE OR DELETE ON Auteur
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    log_transaction('Auteur', 'INSERT', :NEW.id_auteur);
  ELSIF UPDATING THEN
    log_transaction('Auteur', 'UPDATE', :NEW.id_auteur);
  ELSIF DELETING THEN
    log_transaction('Auteur', 'DELETE', :OLD.id_auteur);
  END IF;
END;
/

-- Trigger de la table Recette
CREATE OR REPLACE TRIGGER trg_recette_trace
AFTER INSERT OR UPDATE OR DELETE ON Recette
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    log_transaction('Recette', 'INSERT', :NEW.id_recette);
  ELSIF UPDATING THEN
    log_transaction('Recette', 'UPDATE', :NEW.id_recette);
  ELSIF DELETING THEN
    log_transaction('Recette', 'DELETE', :OLD.id_recette);
  END IF;
END;
/

-- Trigger de la table Ingredient
CREATE OR REPLACE TRIGGER trg_ingredient_trace
AFTER INSERT OR UPDATE OR DELETE ON Ingredient
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    log_transaction('Ingredient', 'INSERT', :NEW.id_ingredient);
  ELSIF UPDATING THEN
    log_transaction('Ingredient', 'UPDATE', :NEW.id_ingredient);
  ELSIF DELETING THEN
    log_transaction('Ingredient', 'DELETE', :OLD.id_ingredient);
  END IF;
END;
/

-- Trigger de la table Recette_Ingredient
CREATE OR REPLACE TRIGGER trg_recette_ingredient_trace
AFTER INSERT OR UPDATE OR DELETE ON Recette_Ingredient
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    log_transaction('Recette_Ingredient', 'INSERT', :NEW.id_recette, :NEW.id_ingredient);
  ELSIF UPDATING THEN
    log_transaction('Recette_Ingredient', 'UPDATE', :NEW.id_recette, :NEW.id_ingredient);
  ELSIF DELETING THEN
    log_transaction('Recette_Ingredient', 'DELETE', :OLD.id_recette, :OLD.id_ingredient);
  END IF;
END;
/


-- INSERTION DES DONNÉES D'EXEMPLE


-- Auteurs
INSERT INTO Auteur (nom, email, bio) VALUES ('Marie Tremblay', 'marie@recettesqc.ca', 'Passionnée de cuisine maison et de plats traditionnels québécois.');
INSERT INTO Auteur (nom, email, bio) VALUES ('Olivier Gagnon', 'olivier@veggieblog.com', 'Chef végétarien amateur qui aime réinventer les classiques.');
INSERT INTO Auteur (nom, email, bio) VALUES ('Sophie Moreau', 'sophie@santedelice.ca', 'Spécialisée en cuisine santé et recettes rapides.');

-- Ingrédients
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Oeuf', 4);
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Farine blanche', 2);
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Épinards', 5);
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Lait', 3);
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Pâtes de blé entier', 4);
INSERT INTO Ingredient (nom, cote_sante) VALUES ('Beurre', 1);

-- Recettes
INSERT INTO Recette (titre, description, instructions, temps_preparation, temps_cuisson, auteur_id)
VALUES ('Crêpes maison', 'Des crêpes moelleuses parfaites pour le déjeuner.', '1. Mélanger les ingrédients. 2. Cuire à feu moyen.', 10, 5, 1);

INSERT INTO Recette (titre, description, instructions, temps_preparation, temps_cuisson, auteur_id)
VALUES ('Salade d''épinards', 'Une salade simple et rafraîchissante.', '1. Laver les épinards. 2. Ajouter vinaigrette au goût.', 5, 0, 3);

INSERT INTO Recette (titre, description, instructions, temps_preparation, temps_cuisson, auteur_id)
VALUES ('Pâtes aux épinards et œufs', 'Pâtes santé avec œufs pochés et épinards.', '1. Cuire les pâtes. 2. Ajouter œufs pochés et épinards sautés.', 15, 10, 2);

INSERT INTO Recette (titre, description, instructions, temps_preparation, temps_cuisson, auteur_id)
VALUES ('Oeufs brouillés au beurre', 'Classique rapide pour le matin.', '1. Battre les œufs. 2. Cuire avec beurre à feu doux.', 3, 5, 1);

-- Recette_Ingredient (liaisons avec quantités)
INSERT INTO Recette_Ingredient VALUES (1, 1, '2 œufs');
INSERT INTO Recette_Ingredient VALUES (1, 2, '1 tasse de farine');
INSERT INTO Recette_Ingredient VALUES (1, 4, '1 tasse de lait');
INSERT INTO Recette_Ingredient VALUES (2, 3, '2 tasses d’épinards');
INSERT INTO Recette_Ingredient VALUES (3, 1, '2 œufs');
INSERT INTO Recette_Ingredient VALUES (3, 3, '1 tasse d’épinards');
INSERT INTO Recette_Ingredient VALUES (3, 5, '200g de pâtes');
INSERT INTO Recette_Ingredient VALUES (4, 1, '3 œufs');
INSERT INTO Recette_Ingredient VALUES (4, 6, '1 c. à soupe de beurre');


CREATE OR REPLACE VIEW Vue_Recette_Details AS
SELECT 
    r.id_recette,
    r.titre,
    a.nom AS auteur_nom,
    (NVL(r.temps_preparation, 0) + NVL(r.temps_cuisson, 0)) AS temps_total
FROM 
    Recette r
JOIN 
    Auteur a ON r.auteur_id = a.id_auteur;


CREATE OR REPLACE VIEW Vue_Ingredients_Recette AS
SELECT 
    r.id_recette,
    r.titre AS recette,
    i.nom AS ingredient,
    ri.quantite
FROM 
    Recette_Ingredient ri
JOIN 
    Recette r ON ri.id_recette = r.id_recette
JOIN 
    Ingredient i ON ri.id_ingredient = i.id_ingredient;

CREATE OR REPLACE PACKAGE RECETTE_PKG AS
  -- Fonction qui calcule la cote santé moyenne d'une recette
  FUNCTION get_cote_sante(p_id_recette NUMBER) RETURN NUMBER;
  
  -- Fonction qui renvoie les ingrédients d'une recette sous forme de texte
  FUNCTION get_ingredients_texte(p_id_recette NUMBER) RETURN VARCHAR2;
  
  -- Procédure qui affiche les détails complets d'une recette
  PROCEDURE afficher_details(p_id_recette NUMBER);
END RECETTE_PKG;
/

CREATE OR REPLACE PACKAGE BODY RECETTE_PKG AS
  FUNCTION get_cote_sante(p_id_recette NUMBER) RETURN NUMBER IS
    v_cote_moyenne NUMBER;
  BEGIN
    SELECT ROUND(AVG(i.cote_sante), 1)
    INTO v_cote_moyenne
    FROM Recette_Ingredient ri
    JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient
    WHERE ri.id_recette = p_id_recette;
    
    RETURN v_cote_moyenne;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
    WHEN OTHERS THEN
      RETURN 0;
  END get_cote_sante;
  
  FUNCTION get_ingredients_texte(p_id_recette NUMBER) RETURN VARCHAR2 IS
    v_ingredients VARCHAR2(1000) := '';
    v_separator VARCHAR2(2) := '';
  BEGIN
    FOR ing IN (
      SELECT i.nom, ri.quantite
      FROM Recette_Ingredient ri
      JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient
      WHERE ri.id_recette = p_id_recette
      ORDER BY i.nom
    ) LOOP
      v_ingredients := v_ingredients || v_separator || ing.quantite || ' de ' || ing.nom;
      v_separator := ', ';
    END LOOP;
    
    RETURN v_ingredients;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Erreur: impossible de récupérer les ingrédients';
  END get_ingredients_texte;
  
  PROCEDURE afficher_details(p_id_recette NUMBER) IS
    v_titre Recette.titre%TYPE;
    v_description Recette.description%TYPE;
    v_auteur Auteur.nom%TYPE;
    v_temps_total NUMBER;
    v_ingredients VARCHAR2(1000);
    v_cote_sante NUMBER;
  BEGIN
    SELECT r.titre, r.description, a.nom, 
           (NVL(r.temps_preparation, 0) + NVL(r.temps_cuisson, 0))
    INTO v_titre, v_description, v_auteur, v_temps_total
    FROM Recette r
    JOIN Auteur a ON r.auteur_id = a.id_auteur
    WHERE r.id_recette = p_id_recette;
    
    v_ingredients := get_ingredients_texte(p_id_recette);
    v_cote_sante := get_cote_sante(p_id_recette);
    
    DBMS_OUTPUT.PUT_LINE('Recette: ' || v_titre);
    DBMS_OUTPUT.PUT_LINE('Par: ' || v_auteur);
    DBMS_OUTPUT.PUT_LINE('Description: ' || v_description);
    DBMS_OUTPUT.PUT_LINE('Temps total: ' || v_temps_total || ' minutes');
    DBMS_OUTPUT.PUT_LINE('Cote santé moyenne: ' || v_cote_sante || '/5');
    DBMS_OUTPUT.PUT_LINE('Ingrédients: ' || v_ingredients);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Recette non trouvée !');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erreur: ' || SQLERRM);
  END afficher_details;
END RECETTE_PKG;
/
